// --------------------------------------------------------------------------------------------------------------------
// <auto-generated>
//   Generated using OBeautifulCode.CodeGen.ModelObject (1.0.192.0)
// </auto-generated>
// --------------------------------------------------------------------------------------------------------------------

namespace Naos.Database.Domain.Test
{
    using global::System;
    using global::System.CodeDom.Compiler;
    using global::System.Collections.Concurrent;
    using global::System.Collections.Generic;
    using global::System.Collections.ObjectModel;
    using global::System.Diagnostics.CodeAnalysis;

    using global::FakeItEasy;

    using global::Naos.Database.Domain;
    using global::Naos.Diagnostics.Domain;

    using global::OBeautifulCode.AutoFakeItEasy;
    using global::OBeautifulCode.Math.Recipes;
    using global::OBeautifulCode.Representation.System;
    using global::OBeautifulCode.Serialization;
    using global::OBeautifulCode.Type;

    /// <summary>
    /// The default (code generated) Dummy Factory.
    /// Derive from this class to add any overriding or custom registrations.
    /// </summary>
    [ExcludeFromCodeCoverage]
    [GeneratedCode("OBeautifulCode.CodeGen.ModelObject", "1.0.192.0")]
#if !NaosDatabaseSolution
    internal
#else
    public
#endif
    abstract class DefaultDatabaseDummyFactory : IDummyFactory
    {
        public DefaultDatabaseDummyFactory()
        {
            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ArchiveFailureToHandleRecordOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CancelRunningHandleRecordOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CheckJobsOp(
                                 A.Dummy<IReadOnlyCollection<ExpectedJobWithinThreshold>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CheckJobsReport(
                                 A.Dummy<CheckStatus>(),
                                 A.Dummy<IReadOnlyDictionary<string, IJobInformation>>(),
                                 A.Dummy<UtcDateTime>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CheckSingleStreamReport(
                                 A.Dummy<CheckStatus>(),
                                 A.Dummy<IReadOnlyDictionary<string, ExpectedRecordWithinThresholdReport>>(),
                                 A.Dummy<IReadOnlyDictionary<string, RecordExpectedToBeHandledReport>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ChecksPerformedEvent(
                                 A.Dummy<string>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<CheckStatus>(),
                                 A.Dummy<CheckDrivesReport>(),
                                 A.Dummy<CheckJobsReport>(),
                                 A.Dummy<CheckStreamsReport>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CheckStreamInstruction(
                                 A.Dummy<IReadOnlyCollection<ExpectedRecordWithinThreshold>>(),
                                 A.Dummy<IReadOnlyCollection<RecordExpectedToBeHandled>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CheckStreamsOp(
                                 A.Dummy<IReadOnlyDictionary<string, CheckStreamInstruction>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CheckStreamsReport(
                                 A.Dummy<CheckStatus>(),
                                 A.Dummy<IReadOnlyDictionary<string, CheckSingleStreamReport>>(),
                                 A.Dummy<UtcDateTime>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CompleteRunningHandleRecordOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CreateDatabaseOp(
                                 A.Dummy<IDatabaseDefinition>(),
                                 A.Dummy<ExistingDatabaseStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new CreateStreamResult(
                                 A.Dummy<bool>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(FileSystemDatabaseLocator),
                        typeof(MemoryDatabaseLocator),
                        typeof(NullDatabaseLocator)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (DatabaseLocatorBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DeleteDatabaseOp(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DisableHandlingForRecordOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DisableHandlingForStreamOp(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DoesAnyExistByIdOp<Version, Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new DoesAnyExistByIdOp<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new EnableHandlingForStreamOp(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ExpectedJobWithinThreshold(
                                 A.Dummy<string>(),
                                 A.Dummy<TimeSpan>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ExpectedRecordWithinThreshold(
                                 A.Dummy<string>(),
                                 A.Dummy<RecordFilter>(),
                                 A.Dummy<TimeSpan>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ExpectedRecordWithinThresholdReport(
                                 A.Dummy<CheckStatus>(),
                                 A.Dummy<ExpectedRecordWithinThreshold>(),
                                 A.Dummy<UtcDateTime>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FailRunningHandleRecordOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FileStreamRepresentation(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyList<FileSystemDatabaseLocator>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new FileSystemDatabaseLocator(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetAllObjectsByIdOp<Version, Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetAllObjectsOp<Version>(
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetAllRecordsByIdOp<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetAllRecordsMetadataByIdOp<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetAllRecordsMetadataOp(
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetAllRecordsMetadataOp<Version>(
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetAllRecordsOp<Version>(
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetAllResourceLocatorsOp());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetCompositeHandlingStatusByIdsOp(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<StringSerializedIdentifier>>(),
                                 A.Dummy<VersionMatchStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetCompositeHandlingStatusByIdsOp<Version>(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<Version>>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetCompositeHandlingStatusByTagsOp(
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetDistinctIdsOp<Version>(
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<RecordsToFilterCriteria>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetHandlingHistoryOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetHandlingStatusOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetLatestJobInformationOp(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetLatestObjectByIdOp<Version, Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetLatestObjectOp<Version>(
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetLatestObjectsByIdOp<Version, Version>(
                                 A.Dummy<IReadOnlyCollection<Version>>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetLatestRecordByIdOp<Version, Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetLatestRecordByIdOp<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetLatestRecordMetadataByIdOp<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetLatestRecordOp<Version>(
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetLatestStringSerializedObjectByIdOp<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetNextUniqueLongOp(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetResourceLocatorByIdOp<Version>(
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetResourceLocatorForUniqueIdentifierOp());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetStreamFromRepresentationOp(
                                 A.Dummy<IStreamRepresentation>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new GetStreamFromRepresentationOp<FileStreamRepresentation, RecordingStandardStream>(
                                 A.Dummy<FileStreamRepresentation>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new HandleRecordOp(
                                 A.Dummy<StreamRecord>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new HandleRecordOp<Version>(
                                 A.Dummy<StreamRecord<Version>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new HandleRecordWithIdOp<Version, Version>(
                                 A.Dummy<StreamRecordWithId<Version, Version>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new HandleRecordWithIdOp<Version>(
                                 A.Dummy<StreamRecordWithId<Version>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(HandlingForRecordDisabledEvent),
                        typeof(HandlingForStreamDisabledEvent),
                        typeof(HandlingForStreamEnabledEvent),
                        typeof(RecordHandlingAvailableEvent),
                        typeof(RecordHandlingCanceledEvent),
                        typeof(RecordHandlingCompletedEvent),
                        typeof(RecordHandlingFailedEvent),
                        typeof(RecordHandlingFailureResetEvent),
                        typeof(RecordHandlingRunningEvent),
                        typeof(RecordHandlingSelfCanceledEvent)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (HandlingEventBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new HandlingFilter(
                                 A.Dummy<IReadOnlyCollection<HandlingStatus>>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new HandlingForRecordDisabledEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new HandlingForStreamDisabledEvent(
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new HandlingForStreamEnabledEvent(
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new IdDeprecatedEvent(
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new IdDeprecatedEvent<Version, Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new IdDeprecatedEvent<Version>(
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new IdDeprecatedWithDetailsEvent<Version>(
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new IdDeprecatedWithDetailsEvent<Version, Version, Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new IdDeprecatedWithDetailsEvent<Version, Version>(
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MemoryDatabaseLocator(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MemoryStreamRepresentation(
                                 A.Dummy<string>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new MutexObject(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NamedResourceLocator(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NullDatabaseDefinition(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NullDatabaseLocator());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NullIdentifier());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NullJobInformation(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NullResourceLocator());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new NullStreamRepresentation());

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PruneAfterInternalRecordDateOp(
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PruneBeforeInternalRecordDateOp(
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PruneBeforeInternalRecordIdOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PruneOperationExecutedEvent(
                                 A.Dummy<IPruneOp>(),
                                 A.Dummy<PruneSummary>(),
                                 A.Dummy<UtcDateTime>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PruneOperationRequestedEvent(
                                 A.Dummy<IPruneOp>(),
                                 A.Dummy<UtcDateTime>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PruneRequestCanceledEvent(
                                 A.Dummy<string>(),
                                 A.Dummy<UtcDateTime>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PruneSummary(
                                 A.Dummy<IReadOnlyList<long>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PutAndReturnInternalRecordIdOp<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<ExistingRecordStrategy>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PutOp<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<ExistingRecordStrategy>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PutRecordResult(
                                 A.Dummy<long?>(),
                                 A.Dummy<IReadOnlyCollection<long>>(),
                                 A.Dummy<IReadOnlyCollection<long>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PutWithIdAndReturnInternalRecordIdOp<Version, Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<Version>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<ExistingRecordStrategy>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new PutWithIdOp<Version, Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<Version>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<ExistingRecordStrategy>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<TypeSelectionStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordExpectedToBeHandled(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<RecordFilter>(),
                                 A.Dummy<HandlingFilter>(),
                                 A.Dummy<TimeSpan>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordExpectedToBeHandledReport(
                                 A.Dummy<CheckStatus>(),
                                 A.Dummy<RecordExpectedToBeHandled>(),
                                 A.Dummy<IReadOnlyDictionary<long, HandlingStatus>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordFilter(
                                 A.Dummy<IReadOnlyCollection<long>>(),
                                 A.Dummy<IReadOnlyCollection<StringSerializedIdentifier>>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<TypeRepresentation>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordHandlingAvailableEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<StreamRecord>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordHandlingCanceledEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordHandlingCompletedEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(HandlingForRecordDisabledEvent),
                        typeof(RecordHandlingAvailableEvent),
                        typeof(RecordHandlingCanceledEvent),
                        typeof(RecordHandlingCompletedEvent),
                        typeof(RecordHandlingFailedEvent),
                        typeof(RecordHandlingFailureResetEvent),
                        typeof(RecordHandlingRunningEvent),
                        typeof(RecordHandlingSelfCanceledEvent)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (RecordHandlingEventBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordHandlingFailedEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordHandlingFailureResetEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordHandlingRunningEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordHandlingSelfCanceledEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordLocator(
                                 A.Dummy<IResourceLocator>(),
                                 A.Dummy<long>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordsToFilterCriteria(
                                 A.Dummy<RecordsToFilterSelectionStrategy>(),
                                 A.Dummy<VersionMatchStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordToCheckForExcessiveHandling(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<RecordFilter>(),
                                 A.Dummy<HandlingFilter>(),
                                 A.Dummy<int>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new RecordToCheckForFailedHandling(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<RecordFilter>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ReleaseMutexOp(
                                 A.Dummy<WaitOneOp>(),
                                 A.Dummy<long>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ResetCompletedHandleRecordOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ResetFailedHandleRecordOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(FileSystemDatabaseLocator),
                        typeof(MemoryDatabaseLocator),
                        typeof(NamedResourceLocator),
                        typeof(NullDatabaseLocator),
                        typeof(NullResourceLocator)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (ResourceLocatorBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new SelfCancelRunningHandleRecordOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardCreateStreamOp(
                                 A.Dummy<IStreamRepresentation>(),
                                 A.Dummy<ExistingStreamStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardDeleteStreamOp(
                                 A.Dummy<IStreamRepresentation>(),
                                 A.Dummy<StreamNotFoundStrategy>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardGetDistinctStringSerializedIdsOp(
                                 A.Dummy<RecordFilter>(),
                                 A.Dummy<RecordsToFilterCriteria>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardGetHandlingHistoryOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardGetHandlingStatusOp(
                                 A.Dummy<string>(),
                                 A.Dummy<RecordFilter>(),
                                 A.Dummy<HandlingFilter>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardGetInternalRecordIdsOp(
                                 A.Dummy<RecordFilter>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<RecordsToFilterCriteria>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardGetLatestRecordOp(
                                 A.Dummy<RecordFilter>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<StreamRecordItemsToInclude>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardGetLatestStringSerializedObjectOp(
                                 A.Dummy<RecordFilter>(),
                                 A.Dummy<RecordNotFoundStrategy>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardGetNextUniqueLongOp(
                                 A.Dummy<string>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardPruneStreamOp(
                                 A.Dummy<long?>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardPutRecordOp(
                                 A.Dummy<StreamRecordMetadata>(),
                                 A.Dummy<DescribedSerializationBase>(),
                                 A.Dummy<ExistingRecordStrategy>(),
                                 A.Dummy<int?>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<long?>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardTryHandleRecordOp(
                                 A.Dummy<string>(),
                                 A.Dummy<RecordFilter>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<string>(),
                                 A.Dummy<long?>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<StreamRecordItemsToInclude>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardUpdateHandlingStatusForRecordOp(
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<HandlingStatus>(),
                                 A.Dummy<IReadOnlyCollection<HandlingStatus>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<bool>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StandardUpdateHandlingStatusForStreamOp(
                                 A.Dummy<HandlingStatus>(),
                                 A.Dummy<string>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<IResourceLocator>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StreamConfig(
                                 A.Dummy<string>(),
                                 A.Dummy<StreamAccessKinds>(),
                                 A.Dummy<SerializerRepresentation>(),
                                 A.Dummy<SerializationFormat>(),
                                 A.Dummy<IReadOnlyCollection<IResourceLocator>>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(StreamConfig)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (StreamConfigBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StreamRecord(
                                 A.Dummy<long>(),
                                 A.Dummy<StreamRecordMetadata>(),
                                 A.Dummy<DescribedSerializationBase>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StreamRecord<Version>(
                                 A.Dummy<long>(),
                                 A.Dummy<StreamRecordMetadata>(),
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StreamRecordHandlingEntry(
                                 A.Dummy<long>(),
                                 A.Dummy<long>(),
                                 A.Dummy<string>(),
                                 A.Dummy<HandlingStatus>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<UtcDateTime>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StreamRecordMetadata(
                                 A.Dummy<string>(),
                                 A.Dummy<SerializerRepresentation>(),
                                 A.Dummy<TypeRepresentationWithAndWithoutVersion>(),
                                 A.Dummy<TypeRepresentationWithAndWithoutVersion>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<UtcDateTime>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StreamRecordMetadata<Version>(
                                 A.Dummy<Version>(),
                                 A.Dummy<SerializerRepresentation>(),
                                 A.Dummy<TypeRepresentationWithAndWithoutVersion>(),
                                 A.Dummy<TypeRepresentationWithAndWithoutVersion>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<UtcDateTime>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StreamRecordWithId<Version, Version>(
                                 A.Dummy<long>(),
                                 A.Dummy<StreamRecordMetadata<Version>>(),
                                 A.Dummy<Version>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StreamRecordWithId<Version>(
                                 A.Dummy<long>(),
                                 A.Dummy<StreamRecordMetadata<Version>>(),
                                 A.Dummy<DescribedSerializationBase>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StreamRepresentation(
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () =>
                {
                    var availableTypes = new[]
                    {
                        typeof(FileStreamRepresentation),
                        typeof(MemoryStreamRepresentation),
                        typeof(StreamRepresentation)
                    };

                    var randomIndex = ThreadSafeRandom.Next(0, availableTypes.Length);

                    var randomType = availableTypes[randomIndex];

                    var result = (StreamRepresentationBase)AD.ummy(randomType);

                    return result;
                });

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new StringSerializedIdentifier(
                                 A.Dummy<string>(),
                                 A.Dummy<TypeRepresentation>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new ThrowIfResourceUnavailableOp(
                                 A.Dummy<ResourceLocatorBase>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TryHandleRecordOp<Version>(
                                 A.Dummy<string>(),
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<long?>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TryHandleRecordResult(
                                 A.Dummy<StreamRecord>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TryHandleRecordWithIdOp<Version, Version>(
                                 A.Dummy<string>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<long?>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TryHandleRecordWithIdOp<Version>(
                                 A.Dummy<string>(),
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<VersionMatchStrategy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<TagMatchStrategy>(),
                                 A.Dummy<OrderRecordsBy>(),
                                 A.Dummy<IReadOnlyCollection<NamedValue<string>>>(),
                                 A.Dummy<string>(),
                                 A.Dummy<long?>(),
                                 A.Dummy<bool>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new TypeRepresentationWithAndWithoutVersion(
                                 A.Dummy<TypeRepresentation>(),
                                 A.Dummy<TypeRepresentation>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new UniqueLongIssuedEvent(
                                 A.Dummy<long>(),
                                 A.Dummy<UtcDateTime>(),
                                 A.Dummy<string>()));

            AutoFixtureBackedDummyFactory.AddDummyCreator(
                () => new WaitOneOp(
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<string>(),
                                 A.Dummy<TimeSpan>()));
        }

        /// <inheritdoc />
        public Priority Priority => new FakeItEasy.Priority(1);

        /// <inheritdoc />
        public bool CanCreate(Type type)
        {
            return false;
        }

        /// <inheritdoc />
        public object Create(Type type)
        {
            return null;
        }
    }
}